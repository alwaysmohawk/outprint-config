[include shell_command.cfg]
[include mainsail.cfg]
# This file contains common pin mappings for the BIGTREETECH SKR Pico V1.0
# To use this config, the firmware should be compiled for the RP2040 with
# USB communication.

# The "make flash" command does not work on the SKR Pico V1.0. Instead,
# after running "make", copy the generated "out/klipper.uf2" file
# to the mass storage device in RP2040 boot mode

## Voron Design VORON 0.2 SKR Pico V1.0 config

## *** THINGS TO CHANGE/CHECK: ***
## MCU path                                                                     [mcu] section
## Z and Extruder motor currents                                                [tmc2209 stepper_*] sections. Uncomment the stepper motor you have
## Full steps per rotation for Extruder                                         [extruder] section
## Thermistor types                                                             [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Motor currents                                                               [extruder] [stepper] and [_HOME_X/Y] macro sections
## PID tune                                                                     [extruder] and [heater_bed] sections
## Fine tune E steps                                                            [extruder] section
## For more info                                                                check https://docs.vorondesign.com/build/startup/#v0


[include displayMenu.cfg]

[include timelapse.cfg]



[display_glyph speed]
data:
  .....*****......
  ...**..*..**....
  ..**...*....*...
  .*..*........*..
  ***.......*.***.
  *........*....*.
  ***.....*...***.
  *......*......*. 
  *.*.........*.*.
  **...........**.
  .*...........*..
  ..*.........*...
  ...**.....**....
  .....*****......
  ................
  ................

[display_data _default_16x4 speed_factor]
position: 1, 10
text:
  ~speed~
  { "{:>4.0%}".format(printer.gcode_move.speed_factor) }



[mcu]
#####################################################################
# Obtain definition by "ls -l /dev/serial/by-id/"
#####################################################################
#from pre can:::: serial: /dev/serial/by-id/usb-Klipper_rp2040_4550357129149D28-if00
## serial: /dev/ttyAMA0 											# for UART connection
canbus_uuid: 483e24017315
# from pre can:::: restart_method: command


[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: -200
max_temp: 100

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: -200
max_temp: 100



[printer]
kinematics: corexy
max_velocity: 400
max_accel:10000 #input shaper says not over 11k lol
max_z_velocity: 15
max_z_accel: 300
square_corner_velocity: 6.0

# [mcu rpi]
# serial: /tmp/klipper_host_mcu

# [adxl345]
# cs_pin: rpi:None

# [resonance_tester]
# accel_chip: adxl345
# probe_points:
#     100, 100, 20  # an example


# [mcu rpi]
# serial: /tmp/klipper_host_mcu
# [adxl345]
# cs_pin: rpi:gpio74
# spi_bus: spidev1.1
# [resonance_tester]
# accel_chip: adxl345
# probe_points:
#   100, 100, 20

[exclude_object]

[mcu CB1]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: CB1:gpio67
#spi_bus: spidev
axes_map: z,x,y # Modify according to the actual orientation of the ADXL345 installed on the printer.

#https://www.reddit.com/r/BIGTREETECH/comments/14m222t/btt_pi_and_btt_adxl345_settings/
#https://github.com/bigtreetech/CB1/discussions/47
# ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_x_*.csv -o /tmp/shaper_calibrate_x.png
# ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_y_*.csv -o /tmp/shaper_calibrate_y.png
# cd /tmp
# python3 -m http.server 8080


[resonance_tester]
accel_chip: adxl345
probe_points:
# Somewhere slightly above the middle of your print bed
  60,80, 20

[input_shaper]
shaper_freq_x: 78.8
shaper_type_x: mzv
shaper_freq_y: 62.2
shaper_type_y: ei


#####################################################################
#      X/Y Stepper Settings
#####################################################################

[stepper_x]
step_pin: gpio11
## Refer to https://docs.vorondesign.com/build/startup/#v0
dir_pin: gpio10                                                     # Check motor direction in link above. If inverted, add a ! before gpio10
enable_pin: !gpio12
rotation_distance: 40
microsteps: 32
full_steps_per_rotation: 200                                        # Set to 400 for 0.9° degree stepper motor, 200 is for 1.8° stepper motors
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_endstop: 120
position_max: 120
homing_speed: 37                                                    # for sensorless homing it is recommended not to go above 40mm/s   
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 0
interpolate: False
# run_current: 0.0            
run_current: .7
# you need to calculate the run_current value using the equation (rated_motor_current * 0.707 = Maximum_run_current) 
#start with a value that is about 60%-70% of your maximum value.
#datasheet says 1.5A rated current
sense_resistor: 0.110
stealthchop_threshold: 0                                            
# Set to 999999 to turn stealthchop on, and 0 to use spreadcycle
diag_pin: ^gpio4    												
# YOU NEED TO JUMP THIS DIAG PIN ON YOUR BOARD FOR SENSORLESS HOMING TO WORK 
driver_SGTHRS: 98
# this is set to 255 which is the MAX sensitivity for sensorless homing, you will need to tune this later

[stepper_y]
step_pin: gpio6
## Refer to https://docs.vorondesign.com/build/startup/#v0
dir_pin: gpio5                                                      # Check motor direction in link above. If inverted, add a ! before gpio5
enable_pin: !gpio7
rotation_distance: 40
microsteps: 32
full_steps_per_rotation: 200                                        # Set to 400 for 0.9° degree stepper motor, 200 is for 1.8° stepper motors
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_endstop: 120
position_max: 120
homing_speed: 37                                                    # for sensorless homing it is recommended not to go above 40mm/s   
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 2
interpolate: False
run_current: .7
# you need to calculate the run_current value using the equation (rated_motor_current * 0.707 = Maximum_run_current) 
#start with a value that is about 60%-70% of your maximum value.
#datasheet says 1.5A rated current
sense_resistor: 0.110
stealthchop_threshold: 0                                            # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle
diag_pin: ^gpio3    												
# YOU NEED TO JUMP THIS DIAG PIN ON YOUR BOARD FOR SENSORLESS HOMING TO WORK 
driver_SGTHRS: 81
# this is set to 255 which is the MAX sensitivity for sensorless homing, you will need to tune this later

#####################################################################
#   Z Stepper Settings
#####################################################################

[stepper_z]
step_pin: gpio19
dir_pin: !gpio28                                                    # Remove the ! before gpio28 if motor direction is inverted.
enable_pin: !gpio2
rotation_distance: 8                                                # For T8x8 integrated lead screw
microsteps: 32
endstop_pin: ^gpio25
#position_endstop: 120
position_max: 120
position_min: -3
homing_speed: 20
second_homing_speed: 3.0
homing_retract_dist: 3.0


[tmc2209 stepper_z]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 1
interpolate: False
## For OMC (StepperOnline) 17LS13-0404E-200G 0.4A 
#run_current: 0.2
## For LDO-42STH25-1004CL200E 1.0A
#run_current: 0.37
run_current: 0.27
sense_resistor: 0.110
stealthchop_threshold: 0                                            # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle

#####################################################################
#   Extruder
#####################################################################

# [extruder]
# step_pin: gpio14
# dir_pin: gpio13                                                     # Add ! if moving opposite direction
# enable_pin: !gpio15
# #full_steps_per_rotation: 200                                       # Set to 200 for LDO 1.8° stepper motor, and set to 400 for OMC(StepperOnline) 0.9° stepper motor
# rotation_distance: 22.003254                                            # See calibrating rotation_distance on extruders doc
# gear_ratio: 50:10                                                   # For Mini Afterburner
# microsteps: 32
# nozzle_diameter: 0.400
# filament_diameter: 1.750
# heater_pin: gpio23
# ## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
# ## Use "Generic 3950" for NTC 100k 3950 thermistors
# sensor_type: Generic 3950
# sensor_pin: gpio27
# control: pid                                                        # Do PID calibration after initial checks
# pid_Kp: 28.182
# pid_Ki: 1.978
# pid_Kd: 100.397
# min_temp: 0
# max_temp: 280
# min_extrude_temp: 170
# max_extrude_only_distance: 150
# max_extrude_cross_section: 30
# pressure_advance: 0.0                                               # See tuning pressure advance doc
# pressure_advance_smooth_time: 0.040

# [tmc2209 extruder]
# uart_pin: gpio9
# tx_pin: gpio8
# uart_address: 3
# interpolate: False
# ## For OMC (StepperOnline) 14HR07-1004VRN 1A 0.9°
# #run_current: 0.5 # for OMC 14HR07-1004VRN rated at 1A
# run_current: 0.5
# ## For LDO LDO 36STH17-1004AHG 1A 1.8° 
# #run_current: 0.3 # for LDO 36STH17-1004AHG
# ## For LDO LDO 36STH20-1004AHG 1A 1.8° 
# #run_current: 0.6 # for LDO 36STH20-1004AHG
# sense_resistor: 0.110
# stealthchop_threshold: 0                                            # Set to 0 for spreadcycle, avoid using stealthchop on extruder

# This file contains common pin mappings for the BIGTREETECH EBBCan
# Canbus board. To use this config, the firmware should be compiled for the
# STM32G0B1 with "8 MHz crystal" and "USB (on PA11/PA12)" or "CAN bus (on PB0/PB1)".
# The "EBB Can" micro-controller will be used to control the components on the nozzle.

# See docs/Config_Reference.md for a description of parameters.

[mcu EBBCan]
# serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_1F0015001350425539393020-if00
#canbus_uuid: 0e0d81e4210c
canbus_uuid: 77d7a9e210c8

[adxl345]
cs_pin: EBBCan: PB12
spi_software_sclk_pin: EBBCan: PB10
spi_software_mosi_pin: EBBCan: PB11
spi_software_miso_pin: EBBCan: PB2
axes_map: x,y,z

[extruder]
step_pin: EBBCan: PD0
dir_pin: !EBBCan: PD1
enable_pin: !EBBCan: PD2
microsteps: 32
rotation_distance: 22.003254
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: EBBCan: PB13
sensor_type: Generic 3950
sensor_pin: EBBCan: PA3
control: pid
pid_Kp: 21.527
pid_Ki: 1.063
pid_Kd: 108.982
max_extrude_only_distance: 150
max_extrude_cross_section: 30
gear_ratio: 50:10 
min_temp: 0
max_temp: 300
min_extrude_temp: 170
max_extrude_only_distance: 150
max_extrude_cross_section: 30
pressure_advance: 0.0                                               # See tuning pressure advance doc
pressure_advance_smooth_time: 0.040

# sensor_type:MAX31865
# sensor_pin: EBBCan: PA4
# spi_bus: spi1
# rtd_nominal_r: 100
# rtd_reference_r: 430
# rtd_num_of_wires: 2

[tmc2209 extruder]
uart_pin: EBBCan: PA15
run_current: 0.4
stealthchop_threshold: 0
#moved from stock v0 to ebb board
interpolate: False
sense_resistor: 0.110

# # FROM STOCK V0
# # [tmc2209 extruder]
# # uart_pin: gpio9
# # tx_pin: gpio8
# # uart_address: 3
# # interpolate: False
# # ## For OMC (StepperOnline) 14HR07-1004VRN 1A 0.9°
# # #run_current: 0.5 # for OMC 14HR07-1004VRN rated at 1A
# # run_current: 0.5
# # ## For LDO LDO 36STH17-1004AHG 1A 1.8° 
# # #run_current: 0.3 # for LDO 36STH17-1004AHG
# # ## For LDO LDO 36STH20-1004AHG 1A 1.8° 
# # #run_current: 0.6 # for LDO 36STH20-1004AHG
# # sense_resistor: 0.110
# # stealthchop_threshold: 0                                            # Set to 0 for spreadcycle, avoid using stealthchop on extruder

[fan]
pin: EBBCan: PA0
max_power: 1
kick_start_time: 0.5                                                # Depending on your fan, you may need to increase this value if your fan will not start
off_below: 0.13
cycle_time: 0.010

[heater_fan hotend_fanebb36]
pin: EBBCan: PA1
heater: extruder
heater_temp: 70.0
max_power: 1
fan_speed: .7
kick_start_time: 0.5

[neopixel ministealth]
pin: EBBCan:PD3
chain_count: 2
color_order: GRB
initial_RED: 0.7
initial_GREEN: 0.0
initial_BLUE: 0.8




#[bltouch]
#sensor_pin: ^EBBCan:PB8
#control_pin: EBBCan:PB9

#[filament_switch_sensor switch_sensor]
#switch_pin: EBBCan:PB4

#[filament_motion_sensor motion_sensor]
#switch_pin: ^EBBCan:PB3

#####################################################################
#   Bed Heater
#####################################################################

[heater_bed]
heater_pin: gpio21
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for Keenovo heaters
sensor_type: Generic 3950
pullup_resistor: 4700
sensor_pin: gpio26
smooth_time: 3.0
#max_power: 0.6                                                     # Only needed for 100w pads
min_temp: -200
max_temp: 120
control: pid                                                        # Do PID calibration after initial checks
pid_kp: 68.453
pid_ki: 2.749
pid_kd: 426.122

#####################################################################
# Fan Control
#####################################################################

# [heater_fan hotend_fan]
# pin: gpio18
# max_power: 1.0
# kick_start_time: 0.5
# heater: extruder
# heater_temp: 70.0
# #fan_speed: 1.0                                                     # You can't PWM the delta fan unless using blue wire

# [fan]
# pin: gpio17
# max_power: 1.0
# kick_start_time: 0.5                                                # Depending on your fan, you may need to increase this value if your fan will not start
# off_below: 0.13
# cycle_time: 0.010

# [controller_fan MCU_fan]
# pin: gpio20
# max_power: 1.0
# kick_start_time: 0.5
# heater: extruder
# #fan_speed: 1.0 

[temperature_fan MCU_fan]
sensor_type: temperature_host #This is what the Pi3's Temperature sensor is known as.
pin: gpio17                 #Set this to your fan pin
max_temp: 80.0                #Set below 85C, Pi3+ MCU can be damaged at 85C
target_temp: 70.0             #Set this to your preferred running temperature
min_temp: -200
shutdown_speed: 0.0
kick_start_time: 0.5
off_below: 0.19
max_speed: 1.0
min_speed: .2
control: pid
pid_Kp: 2.0
pid_Ki: 5.0
pid_Kd: 0.5
pid_deriv_time: 2.0

# [fan NEVERMORE]
# pin: CB1:gpio211
# kick_start_time: 0.5
# #shutdown_speed: 0
# off_below: 0.1
# max_power: 1.0
# #fan_speed: 0.6
# #sensor_type: temperature_host
# #control: pid
# #min_temp: 0
# #max_temp: 85
# #max_delta: 5.0
# #pid_kp: 1.0
# #pid_ki: 0.5
# #pid_kd: 2.0
# min_speed: 0
# max_speed: 1
# #target_temp: 38

# ## This is a simple include for the Nevermore. To use it with your printer, edit
# ## the pin definition in line 16 so it matches your printer.
# ## What you get:
# ## - a generic fan "Nevermore" which is adjustable in GCODE and in Mainsail/Fluidd
# ## - Commands in your 12864-controller to turn the fan on/off or adjust in 10%-steps
# ## - a Macro to turn the fan off some time after the print.
# ##
# ## Slicer integration: Add "SET_FAN_SPEED FAN=Nevermore SPEED=1" in your start-macro
# ## (or less fan depending on your needs, like SPEED=0.8)
# ## in your end print code, add "UPDATE_DELAYED_GCODE ID=filter_off DURATION=180"
# ## this keeps your Nevermore running for 180s after the print finishes to clean the chamber a bit more.

[fan_generic Nevermore]
## Nevermore - FAN5 on Octopus
## Adjust if you use a different board or a different terminal.
pin: gpio20

[menu __main __control __nevermoreonoff]
type: command
name: Nevermore {'ON' if printer['fan_generic Nevermore'].speed > 0 else 'OFF'}
enable: {'fan_generic Nevermore' in printer}
gcode:
    TOGGLE_NEVERMORE

[menu __main __control __filterspeed]
type: input
enable: {'fan_generic Nevermore' in printer}
name: Filter %: {'%3d' % (menu.input*100)}%
input: {printer["fan_generic Nevermore"].speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode:
    SET_FAN_SPEED FAN=Nevermore SPEED={menu.input}

[delayed_gcode filter_off]
gcode:
    SET_FAN_SPEED FAN=Nevermore SPEED=0

[gcode_macro TOGGLE_NEVERMORE]
gcode:
    {% if printer['fan_generic Nevermore'].speed > 0 %}
      SET_FAN_SPEED FAN=Nevermore SPEED=0
    {% else %}
      SET_FAN_SPEED FAN=Nevermore SPEED=1
    {% endif %}s

#####################################################################
#   Filament Runout Sensor
#####################################################################

#[filament_switch_sensor Filament_Runout_Sensor]
#pause_on_runout: True
#runout_gcode: PAUSE
#switch_pin: gpio16

#####################################################################
# Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

[homing_override]
axes: xyz
set_position_z: 0
gcode:
   STATUS_HOMING
   G90
   G0 Z5 F600
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

  {% if home_all or 'X' in params %}
    _HOME_X
  {% endif %}
  
  {% if home_all or 'Y' in params %}
    _HOME_Y
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    _HOME_Z
  {% endif %}
  STATUS_READY

#[safe_z_home]
##home_xy_position: 120,120 										
# these coordinates must NOT be greater than the values specified in "position_max:" for the X and Y steppers
#speed: 50.0
#z_hop: 5

## To be used with BED_SCREWS_ADJUST
[bed_screws]
screw1: 60,5
screw1_name: front screw
screw2: 5,115
screw2_name: back left
screw3: 115,115
screw3_name: back right




#####################################################################
# Neopixel
######################################################################################################################################################################################################################3


[neopixel board_rgb]
pin: gpio24
chain_count: 9
color_order: GRB
initial_RED: 0.7
initial_GREEN: 0.0
initial_BLUE: 0.8

#pre-can
# [neopixel ministealth]
# pin: gpio29
# chain_count: 2
# color_order: GRB
# initial_RED: 0.7
# initial_GREEN: 0.0
# initial_BLUE: 0.8


[neopixel kirigami]
pin: gpio22
chain_count: 2
color_order: GRB
initial_RED: 0
initial_GREEN: 0.26
initial_BLUE: 0.2

# neopixel effects
[led_effect standby]
autostart:              true
frame_rate:             24
leds:
    neopixel:board_rgb
    neopixel:ministealth
layers:
#teal, purple, pink
    breathing  10 1 top (0.2,0.9,0.9),(1.0,0.0,0.1), (1,.0,1)


[led_effect ready-rainbow]
leds:
    neopixel:board_rgb
    neopixel:ministealth
autostart:                          false
frame_rate:                         24
layers:
    gradient  0.6  1 add (0.9, 0.0, 0.9),(0,0,0),(0.0, 0.9, 0.9)

[led_effect printing]
leds:
    neopixel:ministealth
autostart:                          false
frame_rate:                         24
layers:
    gradient 0.6 1 top (1,1,1)

# [led_effect ready-rainbow]
# leds:
#     neopixel:board_rgb
# autostart:                          false
# frame_rate:                         24
# layers:
#     gradient  0.9  1 add (1.0, 0.0, 0.0),(0.0, 1.0, 0.0),(0.0, 0.0, 1.0)

[led_effect homing]
autostart:              false
frame_rate:             24
leds:
    neopixel:board_rgb
    neopixel:ministealth
layers:
        homing  9 0 top (0.0, 0.6, 0.2),(0.6,0.0,.6),(1,.0,1),(1,.0,1)
endstops: x, y, z



#####################################################################
#   V0 Display
#####################################################################
[mcu display]
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_00002D000543564E32313720-if00
restart_method: command

[display]
 lcd_type: sh1106
 i2c_mcu: display
 i2c_bus: i2c1a
# # Set the direction of the encoder wheel
# #   Standard: Right (clockwise) scrolls down or increases values. Left (counter-clockwise scrolls up or decreases values.
 encoder_pins: ^display:PA3, ^display:PA4
# #   Reversed: Right (clockwise) scrolls up or decreases values. Left (counter-clockwise scrolls down or increases values.
# #encoder_pins: ^display:PA4, ^display:PA3
 click_pin: ^!display:PA1
 kill_pin: ^!display:PA5
x_offset: 2
# #   Use X offset to shift the display towards the right. Value can be 0 to 3
vcomh: 31
# #   Set the Vcomh value on SSD1306/SH1106 displays. This value is
# #   associated with a "smearing" effect on some OLED displays. The
# #   value may range from 0 to 63. Default is 0.
# #   Adjust this value if you get some vertical stripes on your display. (31 seems to be a good value)

[neopixel displayStatus]
 pin: display:PA0
 chain_count: 1
 color_order: GRB
 initial_RED: .08
 initial_GREEN: 0
 initial_BLUE: .1

#####################################################################
# Macros
#####################################################################

[gcode_macro STATUS_READY]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=ready-rainbow REPLACE=1

[gcode_macro STATUS_HOMING]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=homing

[gcode_macro breathing]
gcode:
    SET_LED_EFFECT EFFECT=breathing STOP=1

[gcode_macro STATUS_STANDBY]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=standby

[gcode_macro STATUS_PRINTING]
gcode:
    SET_LED_EFFECT EFFECT=printing



[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:
    M104 S0 ; Stops PS/SS from sending temp waits separately

    M140 S[first_layer_bed_temperature] ; set bed temp

    M104 S180 ; get hotend to 180

    G28 ; home all axes

    G1 Z15 F5000 ; lift nozzle

    M190 S[first_layer_bed_temperature] ; wait for bed

    M104 S[first_layer_temperature] ; set hotend temp

    M109 S[first_layer_temperature] ; wait for hotend

    PURGE_LINE

    STATUS_PRINTING
   
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    #M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                 ; retract filament
    G91                            ; relative positioning
    G0 Z2
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 15) %}
        {% set z_safe = 15.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y-10} F3600          ; park nozzle at rear
    G0 Z80 F3600
    STATUS_WAITING
  
[gcode_macro LOAD_FILAMENT]
gcode:
   M104 S240
   M109 S240
   M83                            ; set extruder to relative
   G1 E70 F300                    ; load
   G1 E20 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
   M104 S200


    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M104 S240
   M109 S240
   M83                            ; set extruder to relative
   G1 E12 F300                    ; extrude a little to soften tip
   G1 E-65 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute
   M104 S200

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.36 %} 
# replace the XX with a current value that is about 70% less than your run_current value for X and Y 
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT * RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT * RUN_CURRENT_Y}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    #i decreased this from 1000 to 400
    G4 P400
    G90
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.6 %} 
# replace the XX with a current value that is about 70% less than your run_current value for X and Y 
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT * RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT * RUN_CURRENT_X}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    #i decreased this from 1000 to 400
    G4 P400
    G90
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    G90
    G28 Z
    G1 Z90

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
        G4 P400
    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G4 P400
        G4 P400
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

# # # Klipper Adaptive Purging - VoronDesign Logo # # #

# This macro will parse information from objects in your gcode to define a min and max area, creating a nearby purge with Voron flair!
# For successful purging, you may need to configure:
#
# [extruder]
# ...
# max_extrude_cross_section: 5

[gcode_macro VORON_PURGE]
gcode: 
  G28

# # In order to use this you need to increase max_extrude_cross_section in your extruder config or klipper will complain. I set mine to 30
# [gcode_macro PURGE_BLOB]
# gcode:
#     # This is for a 300mm bed. If you have a diferent bed size you may want to adjust the line below
#     {% set rand_pos = (10 + ( printer.system_stats.cputime * 1000 ) % 60) %}           ; Generate pseudo random start pos so we dont wear out that one spot on the bed. 
#     M117 Purging at X{ rand_pos }                                                       
    
#     # The start pos will be within the "handle" of the flex plate where there is some extra Y space available so we can go all the way to Y0
#     # If your setup does not have this extra space then just increase the y valie in the line "G1 X{ rand_pos } Y0 Z1 F18000"
#     G92 E0                          ; zero the extruder
#     G90                             ; absolute positioning
#     G1 X{ rand_pos } Y0 Z0    ; Go to start pos for perge line
#     G1 Z5 F600                    ; Lower to purge height
#     G91                             ; relative positioning
#     G1 X5 E40 F40                   ; Extrude blob of filament on the bed
#     M106 P0                         ; Enable Cooling Fan
#     G1 X20 Z5 F100                  ; Slow drag away from the blob with fans helping cool and break strings. Also raiz z zo the blob clears the fan duct
#     G1 X5  Z-5.1 F9000              ; Now that the blob has cleared the duct we go back down for a short 0.3mm height extrusion
#     G1 X5 E2 F180                   ; Slow 5mm extrude move to help with stringing
#     G1 X30 E-1 F6000                ; Fast move and retract to break strings and reduce ooze
#     G1 Z1 F100                      ; Lift
#     M106 P0 S0                      ; Disable Cooling Fan
#     G92 E0                          ; zero the extruder
#     G90                             ; absolute positioning

[gcode_macro _globals]
variable_filament_sensor_enabled: 0 # NOTE Enable(1) or disable(0) the filament sensor, if one is connected
variable_beeping_enabled: 1 # NOTE Enable(1) or disable(0) beeping everywhere except during gantry calibration
variable_pre_purge_prime_length: 10
gcode:
    SET_GCODE_VARIABLE MACRO=_globals VARIABLE=pre_purge_prime_length VALUE={ variable_pre_purge_prime_length }
    SET_GCODE_VARIABLE MACRO=_globals VARIABLE=filament_sensor_enabled VALUE={ variable_filament_sensor_enabled }
    SET_GCODE_VARIABLE MACRO=_globals VARIABLE=beeping_enabled VALUE={ variable_beeping_enabled }

[gcode_macro PURGE_LINE]
gcode:
    {% set PRE_PURGE_PRIME_LENGTH=printer["gcode_macro _globals"].pre_purge_prime_length|default(10)|float %}
    #the default above was 1.40
    #ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set extrudeAmount1 = 20 %}
    {% set extrudeAmount2 = 8 %}
    {% set movementLength1 = 70.0 %}
    {% set movementLength2 = 20.0 %}
    {% set movementSpeed = 15 * 60 %}
    {% set xStart = 118 %}
    {% set yStart = 0.5 %}

    #   Set safe speeds
    {% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
    {% set maxVelocityAdjusted =  (0.85 * maxVelocity * 60)|int  %}

    G92 E0.0                                ; reset extruder
    G90                                     ; Absolute positioning
    G0 X{xStart} Y{yStart} F2400         ; move to purge position [but actually a little further forwards (lower Y position), so that you can move back and hopefully clean off the ooze]
    G1 Z0.3 F500.0                          ; move to purge height
    G0 Y0.5 F2400
    M83                                     ; Relative extrusion mode
    G1 E{PRE_PURGE_PRIME_LENGTH} F2000       ; pre-purge prime LENGTH SHOULD MATCH YOUR PRINT_END RETRACT
    G1 Y{xStart - movementLength1} E{extrudeAmount1} F{movementSpeed}       ; intro line 1
    ;G0 X{xStart} Y{yStart+2} F2400 
    ;G1 X{xStart + movementLength2} E{extrudeAmount2} F{movementSpeed} 
    G1 E-.2 F2100                                                                       # Retract
    G92 E0.0                                ; reset extruder
    M82                                     ; Absolute extrusion mode
    G1 Z3.0                                 ; move nozzle to prevent scratch
    G1 Z0.3
    G1 Z3.0



[gcode_macro M600]
gcode:
    CONDITIONAL_BEEP i=1 dur=300
    CONDITIONAL_BEEP i=1 dur=100
    CONDITIONAL_BEEP i=1 dur=100
    PAUSE                ; Pause

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        ADJUST_FILAMENT_SENSOR_STATUS ENABLE=0

        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        ADJUST_FILAMENT_SENSOR_STATUS ENABLE=1

        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*#
#*# [stepper_z]
#*# position_endstop = 119.380
